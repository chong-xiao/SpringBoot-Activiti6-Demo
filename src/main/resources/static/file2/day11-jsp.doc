Day01.	网页编程基础-JavaScript
目录
1	JavaScript简介	1
1.1	什么是JavaScript(了解)	1
1.2	JS特点和优势(了解)	2
1.3	在HTML书写JS的方式(掌握)	2
2	JavaScript语法	2
2.1	注释格式	2
2.2	数据类型	3
2.3	变量和运算符	3
2.4	JS语句	3
2.5	数组和函数	3
2.6	综合练习	3
3	扩展内容:DOM操作	3
3.1	JS获取元素	3
3.2	JS增删改元素	3

1	JavaScript简介
1.1	什么是JavaScript(了解)
JavaScript: 简称JS，是Netscape公司提供的嵌入在html网页中的一门脚本语言，可以实现网页的交互。JS目前已经被广泛的用于web应用开发。
JS常用来嵌入在网页中，为网页添加各式各样的动态效果或为表单添加校验，为用户提供更好的浏览体验。
JS语言和其他语言一样，有自身的基本数据类型、表达式、运算符、语句等程序的基本组成部分。
1.2	JS特点和优势(了解)
特点：
（1）JS是一门直译式的语言，直接执行源代码（是一边解释一边执行，不像Java需要提前编译为class文件再运行）
（2）JS是一门弱类型的语言
优势：
（1）交互性
（2）安全性
（3）跨平台性（跨平台：有浏览器的地方就可以执行JS）
1.3	在HTML书写JS的方式(掌握)
1、在script标签内部可以书写JS代码，如下：
<script>
	alert("书写JS的第一种方式!");
</script>
script标签可以放在head或body或页面的其他位置中，一般放在head中

2、通过script标签引入外部的JS文件
即将所有JS代码放在一个单独的JS文件中（后缀名为.js），再通过script标签引入JS文件即可，例如：
在html中：
<script src="demo.js"></script>
在demo.js中:
alert("书写JS的第二种方式!");

2	JavaScript语法
2.1	注释格式
JS的注释符合和Java的注释符合相同，如下：
// 单行注释内容
/* 多行注释内容 */
2.2	数据类型
1、基本数据类型
JS的基本数据类型一共有五种，分别为数值类型(number)、字符串类型(string)、布尔类型(boolean)、undefined、null。
(1)数值类型
JS中的数值底层都是浮点型，但在需要时会自动的和整型之间进行转换，例如：
2.4+3.6 结果是6，而不是6.0

(2)字符串类型
JS中的字符串是基本数据类型，和Java中不同的是，JS中的字符串可以用单引号或双引号引起来。例如：
var str1 = "Hello JS";
var str2 = 'Hello JS';

(3)布尔类型
布尔常用条件测试中，值为true和false。

(4)undefined和null（了解）
undefined类型的值只有一个, 就是undefined。当声明了变量没有为变量赋值时，变量的值则为undefined。
var x; 
alert(x);//x的值为undefined

null类型的值也只有一个, 就是null。表示空值。可以作为函数的返回值，表示函数返回的是一个空的对象

2、复杂数据类型
JS的复杂数据类型主要指对象
需要注意的是，在JS中，数组、函数也属于对象

2.3	变量和运算符
1、变量
(1)在JS中通过var声明变量，例如：
var a = 10; //声明变量，赋值为数值10
var b = true; //声明变量，赋值为布尔值true
var c = "Hello JS"; //声明变量，赋值为字符串"Hello JS"

(2)JS中声明的变量不区分类型，可以指向任意的数据类型，例如：
var x = 10; //声明变量，赋值为数值10
x = true; //将x赋值为布尔值true
x = "Hello JS"; 将x赋值为字符串"Hello JS"

2、运算符
JS和Java中的运算符大致相同，例如：
算术运算符: +，-，*，/，%，++，--
赋值运算符: =，+=，-=，*=，/=，%=
比较运算符: ==，!=，>，>=，<，<=
位运算符: & ， |
逻辑运算符: && ，||
前置逻辑运算符: ! (not)
三元运算符: 表达式 ? 表达式 : 表达式
。。。
关于运算符，这里不再给出示例
2.4	JS语句
JS中的语句和Java中的大致相同
1、条件语句
条件语句用于基于不同的条件来执行不同的动作，在 JavaScript 中，我们可使用以下条件语句：
(1)if 语句 -- 只有当指定条件为 true 时，使用该语句来执行代码
(2)if...else 语句 -- 当条件为 true 时执行代码，当条件为 false 时执行其他代码
(3)if...else if....else 语句 -- 使用该语句来选择多个代码块之一来执行
(4)switch 语句 -- 使用该语句来选择多个代码块之一来执行

基于其用法和Java中基本相同，其他语句不再给出示例，下面为if...else if....else 语句的示例：
语法：
if (条件 1){
	当条件 1 为 true 时执行的代码
}else if (条件 2){
	当条件 2 为 true 时执行的代码
}else{
	当条件 1 和 条件 2 都不为 true 时执行的代码
}

示例：接收用户输入的成绩（score），如果成绩大于等于90，则将定为"优秀"，如果成绩小于90，但大于等于75，则将定为"中等"，如果成绩小于75，但大于等于60，则将定为"及格"。否则（小于60）定为"不及格"。代码如下：
var score = prompt("请输入你的成绩:");
if (score>=90){
	alert("优秀!");
}else if (score>=75){
	alert("中等!");
}else if (score>=60){
	alert("及格");
}else{
	alert("不及格");
}
2、循环语句
(1)for循环 -- 循环代码块一定的次数
for 循环的语法：
for (语句 1; 语句 2; 语句 3){
	被执行的代码块
}

示例: 声明一个数组并为数组赋值，遍历数组中的元素。
var names = ["王海涛","齐雷","陈子枢"]; 
for (var i=0;i<names.length;i++){ 
	alert("This is Mr "+names[i]);
}		
(2)while循环 -- 在指定条件为真时循环执行代码块
JS中while循环也分为while和do/while循环，下面为while循环的示例。
示例:下面通过while循环遍历names中的数组。
var names = ["王海涛","齐雷","陈子枢"];
var i = 0;
while (i<names.length){
	alert("This is Mr "+names[i]);
	i++;
}
2.5	数组和函数
1、数组
Array 对象用于在单个的变量中存储多个值。
(1)通过Array构造函数创建数组
例如，声明一个空数组：
var arr1 = new Array();
例如，声明一个指定初始值的数组：
var arr2 = new Array(88,"Hello" ,true , 100);

(2)通过数组直接量创建数组
例如，声明一个空数组：
var arr1 = [];
例如，声明一个指定初始值的数组：
var arr2 = [88,"Hello" ,true , 100];

提示：数组的length属性可以返回数组的长度

2、函数/方法
函数就是一个具有功能的代码块{}, 可以反复调用
函数就是包裹在花括号中的代码块，前面使用了关键词 function。
声明函数的语法:
function funcname([参数1,参数2,…]){
	这里是要执行的代码
}
当调用该函数时，会执行函数内的代码。
示例：声明一个函数, 接收两个数值并计算两个数值的乘积，并返回结果：
function myFn(a,b){
	return a*b;
}
fn(3*7);//返回21

对比java中的方法:
public int myFn(int x, int y){
	return x*y;
}

2.6	综合练习
实例1：声明一个函数myFn2，在函数中实现：遍历指定的两个数值之间的整数，将是3的倍数的数值存入到一个数组中，并将数组返回。
1、声明myFn2函数
function myFn2(x,y){
	var arr = [];
	for(var i=x,j=0;i<y;i++){
		if(i%3==0){
			arr[j] = i;
			j++;
		}
	}
	return arr;
}
2、调用myFn2函数, 获取1~100之间是3的倍数的数值组成的数组
var arr = myFn2(1,100);
3、遍历数组中的元素, 输出在网页上(提示: document.write("输出的内容") )
for(var i=0;i<arr.length;i++){
	document.write(arr[i]+" ");
}


实例2：点击div，将div的内容改为当前时间
<script>
	/* 1.点击div，将div的内容改为当前时间 */
	function changeDiv(){
		//>>获取表示div元素的对象
		var div1 = document.getElementById("div1");
		//>>设置div元素的内容为当前时间
		div1.innerHTML = new Date().toLocaleString();
	}
</script>
<body>
<div id="div1" onclick="changeDiv()">
	Hello，CGB1902~!
</div>
</body>
(1)onclick属性 -- 用于为当前div元素绑定点击事件，当点击div后，会立即触发点击事件，执行changeDiv()函数
(2)document.getElementById( id值 ) -- 通过元素的id属性值获取一个元素, 返回表示该元素的JS对象。
(3)innerHTML属性 -- 获取元素内部的所有内容，同时也可以为div元素设置内容.

案例3：点击按钮，切换图片
<script>
	/* 2、点击按钮，换一张图片 */
	var flag = false;//false表示默认状态为关灯
	function changeImg(){
		//1.获取表示img元素的JS对象
		var img1 = document.getElementById("img1");
		//2.通过判断切换图片（改变src属性值）
		if(flag){
			img1.src = "imgs/b01.gif";
			flag = false;
		}else{
			img1.src = "imgs/b02.gif";
			flag = true;
		}
	}
</script>
<input type="button" value="开/关灯"
	onclick="changeImg()" /> <br/><br/>
<img id="img1" src="imgs/b01.gif"/>

3	扩展内容:DOM操作
3.1	JS获取元素
1.getElementById方法
document.getElementById(id值)：根据元素的id值获取指定的元素，返回的是一个JS对象，表示所获取的元素。

2.getElementsByName方法
document.getElementsByName(name值)：根据元素的name属性值获取所有指定name的元素,返回的是一个集合数组(可以按照数组的方式来访问)

3.getElementsByTagName方法
obj.getElementsByTagName(元素名)：根据元素的名称来获取所有指定名称的元素, 返回的值是一个集合数组(按照数组的方式进行访问!)

4.value属性
value：用来获取或设置输入框中的value值
 
	
5.innerHTML属性、innerText属性
innerHTML属性用来获取或设置元素的html内容
	innerText属性用来获取或设置元素的文本内容(部分浏览器不兼容, 比如火狐)

3.2	JS增删改元素
1、createElement方法、appendChild方法
(1)document.createElement("元素名") – 创建一个指定名称的新元素
(2)parent.appendChild(child) – 为元素添加一个子元素.

2、removeChild方法
removeChild方法 – 用来删除子元素
document.body属性 – 用来获取页面中的body元素	